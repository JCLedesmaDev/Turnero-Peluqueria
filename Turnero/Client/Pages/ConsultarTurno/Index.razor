@page "/"
@using Radzen;
@using Turnero.Shared.DTO_Back.Peluquero;
@using Turnero.Shared.DTO_Front

@inject StoreGlobal.GlobalStore storeGlobal;
@inject PeluqueroService PeluqueroService;
@inject TurnoService TurnoService;
@implements IDisposable;


<PageTitle>Consultar turno</PageTitle>


<RadzenTemplateForm Data="@ConsultaTurnoData">

    <div class="row d-flex justify-content-center align-items-center widthPerson bg-danger">

        <div class="col-md-6">
             <RadzenCard>

                 <div>

                     <h4 class="mb-4">Seleccione fecha del corte y peluquero.</h4>
                     <RadzenDatePicker TValue="DateTime?"
                         ShowTime="true"
                         HourFormat="12" DateFormat="dd/MM/yyyy h:mm tt" Class="w-50" 
                         Min="DateTime.Now.AddDays(-1)" 
                         Change=@(args => changeCalendar(args))
                         Placeholder="Seleccionar una fecha"
                     />

                    <RadzenButton Click="@GetAllPeluqueros" Text="Obtener peluqueros" />

                 </div>

                 <br/>

                 <div>

                     @if (Peluqueros != null) {

                        <RadzenDataGrid AllowFiltering="false"
                              FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                              AllowPaging="true" PageSize="3"
                              AllowSorting="true" Data="@Peluqueros" TItem="PeluqueroData" ColumnWidth="50px"
                              SelectionMode="DataGridSelectionMode.Single" @bind-Value=@PeluqueroSeleccionado
                        >
                            <Columns>
                              <RadzenDataGridColumn TItem="PeluqueroData" Property="Nombre" Title="Nombre y Apellido" Sortable="false" Filterable="false">
                                    <Template Context="data">
                                        <RadzenImage Path="@data.ImagenPerfil"
                                                    style="width: 50px; height: 50px; border-radius: 8px; margin-right: 8px;" />
                                        @data.Nombre @data.Apellido
                                    </Template>
                              </RadzenDataGridColumn>
                              <RadzenDataGridColumn TItem="PeluqueroData" Property="DNI" Title="D.N.I" />
                            </Columns>

                        </RadzenDataGrid>
                     }

                     @if (isLoaderPeluquero)
                     {
                        <p class="text-center"> Cargando peluqueros...</p>
                     }

                     @if (PeluqueroSeleccionado?.Any() == true)
                     {
                         <div class="row" >
                              <div class="col-md-6 m-auto">

                                   <RadzenCard class="">
                                       <h3 class="h5">Peluquero seleccionado</h3>
                                       <div class="d-flex flex-row">
                                           <RadzenImage Path="@PeluqueroSeleccionado?[0].ImagenPerfil" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                                           <div>
                                               <div>Nombre y Apellido</div>
                                               <b>@PeluqueroSeleccionado?[0].Nombre @PeluqueroSeleccionado?[0].Apellido</b>
                                               <div class="mt-3">Puesto</div>
                                               <b>Peluquero</b>
                                           </div>
                                       </div>
                                   </RadzenCard>
                              
                               </div>
                         </div>
                     }

                 </div>

                 <div class="row d-flex mt-3">

                     <RadzenButton Text="Realizar consulta"
                         class="justify-content-center"
                         ButtonStyle="ButtonStyle.Primary"
                         Click="onSubmit" 
                     />

                 </div>

             </RadzenCard>
        </div>



    </div>
                  
</RadzenTemplateForm>




@code {

    #region VARIABLES

    public bool isLoaderPeluquero = false;
    public bool FechaSeleccionada = false;

    public List<PeluqueroData> Peluqueros = null;
    public IList<PeluqueroData> PeluqueroSeleccionado = null;


    public ConsultaTurnoDto ConsultaTurnoData = new ConsultaTurnoDto {
        FechaHoraCorte = DateTime.Now,
        IdPeluquero = 0
    };

    #endregion


    #region Ciclo de vida del componente

    protected override void OnInitialized()
    {
        // State
        storeGlobal.SubscribeChangedState(updateComponent);
    }

    public void Dispose()
    {
        storeGlobal.DesubscribeChangedState(updateComponent);
    }

    private void updateComponent() => StateHasChanged();

    #endregion



    private void changeCalendar(DateTime? value) {
        ConsultaTurnoData.FechaHoraCorte = (DateTime)value;
        FechaSeleccionada = true;
    }

    private async Task GetAllPeluqueros()
    {
        try
        {
            isLoaderPeluquero = true;
            Peluqueros = null;
            PeluqueroSeleccionado = null;

            var (ListaPeluqueros, MessageError) = await this.PeluqueroService.GetAll();

            if (ListaPeluqueros == null || MessageError != null)
            {
                throw new Exception(MessageError);
            }

            isLoaderPeluquero = false;
            Peluqueros = ListaPeluqueros;
        }
        catch (Exception ex)
        {
            isLoaderPeluquero = false;
            storeGlobal.SetMessageModal($"Uups... Ha ocurrido un error {ex.Message}");
            storeGlobal.SetShowMessageModal(true);
        }
        finally
        {
            var timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            Task.Run(async () =>
            {
                await Task.Delay(4000);
                timer.Dispose();
            });

            while (await timer.WaitForNextTickAsync())
            {
                storeGlobal.SetShowMessageModal(false);
            }
        }
    }


    private async void onSubmit() {
        try
        {
            storeGlobal.SetShowLoader(true);

            if (FechaSeleccionada == false)
            {
                throw new Exception("debe seleccionar una fecha y horario de corte valido.");
            }

            if (PeluqueroSeleccionado == null)
            {
                throw new Exception("debe seleccionar un peluquero para consultar un turno.");
            }

            ConsultaTurnoData.IdPeluquero = PeluqueroSeleccionado[0].Id;

            var (TurnoDisponible, MessageError) = await this.TurnoService.consultarTurnoReservado(ConsultaTurnoData);

            if (TurnoDisponible == null || MessageError != null)
            {
                throw new Exception(MessageError);
            }

            storeGlobal.SetShowLoader(false);

            storeGlobal.SetMessageModal(TurnoDisponible);
            storeGlobal.SetShowMessageModal(true);

        }
        catch (Exception ex)
        {
            storeGlobal.SetShowLoader(false);
            storeGlobal.SetMessageModal($"Uups... Ha ocurrido un error {ex.Message}");
            storeGlobal.SetShowMessageModal(true);

            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {

            var timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            Task.Run(async () =>
            {
                await Task.Delay(4000);
                timer.Dispose();
            });

            while (await timer.WaitForNextTickAsync())
            {
                storeGlobal.SetShowMessageModal(false);
            }
        }
    }


}
