---- Agregar nuevo proyecto a la solucion: ----

Para agregar un nuevo proyecto deeremos hacer los sig pasos:
1) Click derecho a la Solucion > Agregar > Nuevo Proyecto
2) Buscamos "Bibloteca de clases" (Proyecto para crear una bibloteca de clientes para .NET)
3) Definimos el nombre del Proyecto. Por ejem.: Si la solucion se llama BlazorApp1, 
   podriamos llamar el nuevo proyecto como "BlazorApp1.BD"


---- Definir paquetes NuGet del proyecto BD. ----

1) Click derecho en el proyecto ".BD" > Administrar paquetes de NuGet
Le tendremos que agregar: 
  -> Microsoft.EntityFrameworkCore.SqlServer
  -> Microsoft.EntityFrameworkCore.Tools

  Instalar SQL Server Express desde:
	https://www.microsoft.com/es-es/sql-server/sql-server-downloads


---- Configurar el proyecto BD. ----

Cuando creamos el proyecto de Base de Datos, debemos crear una clase 
que sea el Contexto de nuestra BD.

Nota: Aqui se conectaran todas las clases/tablas que utilizaremos
en el proyecto.

A continuacion, deberemos hacer los siguientes pasos.

1) Borrar el archivo Class1.cs que trae por defecto y crear una carpeta llamada Data.
2) Dentro de Data, crearemos una clase llamada BDContext el cual
   debemos indicar que heredara el DbContext proveniente del using Microsoft.EntityFrameworkCore;
	Por ejem.: 
	public class BDContext: DbContext {}

   Nota: El nombre de la Clase, no debe coincidir con el del namespace y 
         debe ser el mismo que el nombre del archivo
         Por ej.: Si nuestro archivo se llama "BDContext", nuestro namespace
		 no puede terminar en .BDContext

   Nota 2: Cambiar internal por public.

   Nota 3: Debemos agregar el @using del Microsoft.EntityFrameworkCore dentro
	de nuestro Service > Program.cs.
	Escribiendo: global using Microsoft.EntityFrameworkCore;
	De esta manera, ya no nos aparecera en rojo el "DbContext"
	y podremos utilizar el mismo using de manera global en todo el
	proyecto en cuestion. 

3) Inicializamos el constructor de nuestra clase para configurar nuestro
	DbContext y que podamos utilizar todas las funcionalidades que nos brinda
	dentro de nuestro proyecto.
	Por ejemplo.:
	  public BDContext(
		  DbContextOptions<BDContext> options
	  ) : base(options)
	  {

	  }
	PD: Generamos el constructor de nuestra BD, haciendole Ctrl + . al nombre de la Clase
		y elegir la opcion que diga "Generar constructor con optios"

4) Para conectar todas las clases a nuestro DbContext y que de esta 
	manera, podamos definir las Entidades/Tablas que tendra nuestro proyecto,
	deberemos utilizar una propiedad del DbContext y escribir lo siguiente
	public DbSet<NombreClase> NombreEntidad/Tabla {get; set;};
	Por ejem.:
	public DbSet<Medico> MedicosDB { get; set; }

	Nota: Esta clase "Medico" representa nuestra tabla "MedicosDB".
	Nota 2: Estas clases las podemos sacar de Shared si comlpemento con el otro proyecto.


5) ESPECIAL: Para poder asignarle datos por defecto a nuestra Base de Datos 
	(es decir, cuando apenas arranque, tenga datos ya cargados), deberemos hacer
	lo siguiente:

	protected override void OnModelCreating(ModelBuilder modelBuilder){

		// Definimos a la Entidad que le vamos a cargar datos mockeados.
		modelBuilder.Entity<Comic>().HasData(    
		   new Comic { Id = 1, Name = "Marvel"},
		   new Comic { Id = 2, Name ="DC"}
		);

		modelBuilder.Entity<SuperHero>().HasData(
			new SuperHero { 
				Id = 1, 
				FirstName="Peter", 
				LastName="Parker",
				HeroName="Spider-Man",
				ComicId=1
			},
			new SuperHero {
				Id = 2,
				FirstName="Bruce",
				LastName="Wayne",
				HeroName="Batman",
				ComicId=2
			},
		);
	}

	NOTA: Adaptar ejemplo a partir de lo que se necesite.

---- Configurar la Conexion de la BD al Proyecto Server. ----

Dentro de nuestro proyecto ".Server", debemos hacer los siguientes pasos:

1) Agregarle el NuGet "Microsoft.EntityFrameworkCore.Tools" al proyecto
   ".Server" (Idem a unos pasos de arriba)

2) Debemos agregarle al proyecto inicial (es decir, con el cual 
   inicia el programa), el nuevo proyecto que creamos para que lo
   incorpore (es decir, el ".BD").

   PD: Para saber cual es el proyecto inicial, deberemos fijarnos
       dentro de todos los proyectos que tiene la solucion, cual es 
	   el que resalta con letras negras.

   Para ello abriremos ".Server" > Dependencias > Proyectos > 
   "Agregar referencia del proyecto" y seleccionamos
   "BlazorApp.BD" debido a que es un proyecto nuevo q simula nuestra BD


3) Este paso estara dividido en 2 partes:
   
	A) Configurar la cadena de conexion de la BD dentro del Server > appsetting.json / "appsettings.Development.json"
		para ello pegaremos el siguiente codigo dentro del archivo:
		  "ConnectionStrings": {
			"DefaultConnection": "Server=localhost\\SqlExpress; Database='nombreBDCambiar'; Trusted_Connection=true;"
		  },

  		Nota - Datos a completar:
		1) Server= 'La direccion de nuestra BD';
		Para saber la direccion de nuestra BD en SQL Server, debemos ir a 
		Ver > Explorador de objetos de SQL Server
		2) Database= 'nombre de la Bd que vamos a usar'

	B) Reegistramos la conexion de nuestra BD dentro del Service > Program.cs, escribiendo
		lo siguiente:
		builder.Services.AddDbContext<'NombreDbContext'>(options =>
			options.UseSqlServer(builder.Configuration
			 .GetConnectionString("DefaultConnection"))
		)

	    Nota: NombreDbContext, es el nombre de la clase de nuestro BD como por ejemplo: BDContext 
		(Habra que importarlo) Idem con UseSqlServer



---- Generar la Base de Datos. ----

1) Compilar el proyecto (no ejecutarlo), solamente para verificar si tengo errores
   Apretamos Ctrl + Shift + B : Nos compila el programa e indica errores

2) Al no dar error, continuamos con:
   Herramienta > Administrador paquetes NudGet > Consola del administrador de paquetes

   En donde dice "Proyecto predeterminado: BlazorApp.Server", se lo deberemos 
   cambiar por BlazorApp.BD

   Dentro escribiremos los sig. comandos:
   -> add-migration BaseInicial: Migra el codigo que hiciste en C# a codigo
      EntityFramework.

	  Nota: Este comando, nos generara una carpeta llamada "Migrations"
	        en donde nos incluira los archivos que generamos al hacer el
			add-migrations.
			Cada archivo tendra un Id seguido de un _ + el nombre que
			escribimos en el add-migrations

   -> update-database: Convierte todo el codigo migrado a EntityFramework 
      en Tablas.
	  En caso de no tener ninguna tabla, las crea. Caso contrario, las actualiza.

	   Nota: Para acceder a las tablas, deberemos apretar
			 Ver > Explorador de objetos de SQL Server >
			 SQL Server > (Nos aparecera el nombre de nuestra ConnectionStrings)
			 > Base de Datos > (Aparecera el nombre q le definimos a la BD dentro de
			   appSetting.development.json) > Tablas
   
	   Nota 2: Nos aparecera las tablas que definimos dentro de la clase BDContext/BaseDatos
			   y los campos que tendra cada Tabla seran los mismos que sus respectivas clases
			   definidas, debido a que esta dentro del DbSet<>

	   Nota 3: En caso de que querramos cambiar esa clase, deberemos
			   borrar la carpeta de Migracion y la Tabla Medicos
			   para crear todo de 0.

			    
---- Restricciones en la BD. (DataAnnotations) ----

Dentro de las clases, podemos ponerle etiquetas a los atributos de una clase,
esto es con la finalidad de definir las restricciones que tendra nuestras tablas.
Las etiquetas posibles son:
- [Required] // Si le agregamos () podremos asignarle un mensaje.
- [MaxLength('Nro long', ErrorMessage = "Mensaje en caso de incumplimiento")] //Solo para string
- [MinLength('Nro long', ErrorMessage = "Mensaje en caso de incumplimiento")] //Solo para strings


Nota: Estas etiquetas se colocan arriba del atributo en cuestion y se deberan importar
      apretando Ctrl + . y eligiendo la 1ra opcion.

	  Si puedo ejecutamos los comandos "add-migration ..." seguido del "update-database"
	  veremos reflejado estas restricciones en las tablas BD

Para definir la ""clave unica"" de una Tabla, deberemos escribir arriba de la clase, lo sig.:
[Index(
   nameof('nombre atributo/campo para hacerlo clave unica'), 
   Name=" 'nombre de la clave unica.' ",
   IsUnique = true
)]

Esto se lee como: Defino un Indice que de acuerdo al campo definido, voy a crear una 
clave llamada "..." que sera unica.
NOTA: Clave unica significa que ese valor nunca se va a poder repetir.

Para definir la Clave primaria de una Tabla, deberemos escribir arriba de la propiedad
en cuestion, el denotador "[Key]", de esa manera, definiremos de manera explicita la Clave 
primaria en una tabla.


----- Relaciones de Tablas ----- 

A continuacion mencionaremos todas las maneras de poder relacionar las tablas en EntityFrameworkCore.

*** Relacion 1 a 0:
Para relacionar una Tabla con otra debemos hacer uso de las "Claves foraneas" [ForeignKey], la cual consiste en 
determinar una 'propiedad de navegacion' y una 'propiedad de referencia'.
En otras palabras, vamos a crear lo siguiente:
- Una propiedad la cual sera hara hara referencia a una Entidad/Tabla ('propiedad de navegacion')
- Una propiedad propiedad, la cual hara referencia a la "clave primaria" de aquella Entidad/Tabla ('propiedad de referencia')

Una vez dicho esto, definremos ambas propiedades en la que colocaremos el denotador [ForeignKey]
por encima de la 'propiedad de navegacion' haciendo mencion a la 'propieddad de referencia'
Quedando por final, asi:
  public int EspecialidadId { get; set; }
        
  [ForeignKey("EspecialidadId")]
  public Especialidad Especialidad { get; set; }

De esta manera, EspecialidadId sera nuestra 'propieddad de referencia' que nos permitira 
relacionarnos con la Tabla Especialidad.

*** Relacion 1 a 1:

Para hacer que 2 tablas esten relacionadas entre si en forma 1 a 1, deberemos aplicar en
la 'Tabla A' el mismo concepto que aplicamos en 'relacion 1 a 0' pero con la diferencia 
de que en la 'Tabla B', deberemos crear otra 'propedad de navegacion' referida a la
'Tabla A' pero con denotador encima llamado [InverseProperty].
Dicho denotador, hara referencia a la 'propiedad de navegacion' de la Tabla A.

Quedando por ejemplo, asi:
Tabla A: Medico
------------------------
  public int EspecialidadId { get; set; }
        
  [ForeignKey("EspecialidadId")]
  public Especialidad Especialidad { get; set; }

Tabla B: Especialidad
------------------------
  [InverseProperty("Especialidad")]
  public Medico Medico {get; set;}

De esta manera, tenemos que  Medico tiene una Especialidad y una Especialidad tiene un Medico.
(Nota: NO tiene sentido logico, pero es un ejemplo :p)

La Propiedad Inversa de Especialidad hara referencia a la 'Propiedad de navegacion' 
de la Tabla Medico y como dicha 'propiedad de navegacion' esta con la clave foranea, 
por medio de Especialidad, podremos acceder a los datos de "Medico" y por medio de "Medico"
podremos acceder a los datos de "Especialidad".


*** Relacion 1 a MUCHOS:

Idem a "Relacion 1 a 1" pero con la diferencia de que en la Tabla B, la "propiedad de navegacion"
es una lista, quedando por ejemplo: 

Tabla A: Medico
------------------------
  public int EspecialidadId { get; set; }
        
  [ForeignKey("EspecialidadId")]
  public Especialidad EspecialidadA { get; set; }

Tabla B: Especialidad
------------------------
  [InverseProperty("EspecialidadA")]
  public List<Medico> Medicos {get; set;}


*** Relacion MUCHOS a MUCHOS

Para tener una relacion de MUCHOS a MUCHOS, debemos crear una 3ra Tabla, llamada "Tabla relacional"
la cual sera el punto de union entre la Tabla A y la Tabla B.


Tabla A: Autor
-----------------
[InverseProperty("Libro")]
public List<LibroPorAutor> Libros [get; set;]


Tabla B: Libro
-----------------
[InverseProperty("Autor")]
public List<LibroPorAutor> Autores


Tabla C: LibroPorAutor (TablaRelacion)
-----------------------------------
public int LibroId {get; set;}
public int AutorId {get; set;}

[ForeignKey("AutorId")]
public Autor Autor {get; set;}

[ForeignKey("LibroId")]
public Autor Libro {get; set;}


Ejemplos de peticiones a la BD para obtener libros:

1) --> Si entras por libroporautor, podes meter filtros:
DbManager<LibroPorAutor>().Where(l => l.Libro.Nombre.Contains(text));

2) --> Si entras por autor, obtenes todos sus libros.
Todos los libros de un autor en particular:
DbManager<LibroPorAutor>().Where(t => t.Autor == autor);

foreach(LibroPorAutor libroPorAutor in results)
{
   Map<Libro>(libroPorAutor.Libro);
}

3) --> O directamente por el autor.

Autor a = dbManager<Autor>(id);
Foreach(LibroPorAutor libroPorAutor in a.Libros)
{
   Map(libroPorAutor.Libro);
}


**** NOTA PARA LOS TIPOS DE RELACIONES: 
Cuando generemos una busqeuda de datos y querramos traer los datos de la Especialidad
de nuestra Tabla Matricula, deberemos escribir algo como:
_context.Matriculas.Include(Matricula => Matricula.Especialidad)
(PD: ira el nombr del 2do campo creado.)



---- Incorporar Swagger al Servidor ----

Para ello, deberemos instalar primero un NuGet dentro de nuestor proyecto Server
llamado: Swashbuckle.AspNetCore

Una vez instalado el NuGet, nos dirigiremos al archivo Program.cs, para establecer
la config del Swagger con el servidor, escribiendo el siguiente codigo:
builder.Services.AddSwaggerGen(config =>
{
    config.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Matricula",
        Version = "v1",
    });
});

Por ultimo, le debemos indicar al proyecto, como va a trabajar con el Swagger,
por lo que escribiremos el sig fragmento de codigo:
app.UseSwagger();
app.UseSwaggerUI(config =>
{
    config.SwaggerEndpoint(
        "/swagger/v1/swagger.json",
        "Locacion v1"
    );
});

Para acceder al Swagger en la Web, deberemos iniciar el proyecto y a la URL 
inicial que nos aparece como por ejem.: "https://localhost:7260",
le deberemos agregar un "/swagger/index.html"

Quedando al final de la siguiente forma:
"https://localhost:7260/swagger/index.html" y automaticamente nos redireccionara
a la pag. del swagger donde nos aparecera todos los metodos que contiene el proyecto.




---------------------------------------------


Nota personal:

En proyecto de NEPS, tienen un proyecto llamado "entities_library" idem al Shared. 
Cada carpeta es la entidad de algo en relacion pero tb tienen una carpeta llamada
"Comun", la cual tiene clases pero con valores ya predefinido. 


Por ejem.:
public class CodigosArea {
   public static long BitacoraEstudainte = 5
}

Para que cuando necesitan un estado en especifico, escriben:
entity_library.Comun.CodigoArea.BitacoraEstudiante
