@page "/"
@using Turnero.Client.Models;
@using Radzen;
@using Turnero.Shared.DTO_Back.Peluquero;
@using Turnero.Client.Shared.MessageModal;
@using Turnero.Client.Shared.Loader;

@inject PeluqueroService PeluqueroService;

<PageTitle>Index</PageTitle>


<RadzenTemplateForm Data="@ModelTurno">

    <div class="row d-flex justify-content-center align-items-center widthPerson bg-danger">

        <div class="col-md-6">
             <RadzenCard>

                 <div>

                     <h4 class="mb-4">Seleccione fecha del corte y peluquero.</h4>
                     <RadzenDatePicker TValue="DateTime?"
                         ShowTime="true"
                         HourFormat="12" DateFormat="dd/MM/yyyy h:mm tt" Class="w-50" 
                         Min="DateTime.Now.AddDays(-1)" 
                         Change=@(args => changeCalendar(args))
                         Placeholder="Seleccionar una fecha"
                     />

                    <RadzenButton Click="@GetAllPeluqueros" Text="Obtener peluqueros" />

                 </div>

                 <br/>

                 <div>

                     @if (Peluqueros != null) {

                         <RadzenDataGrid AllowFiltering="false"
                              FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                              AllowPaging="true" PageSize="3"
                              AllowSorting="true" Data="@Peluqueros" TItem="PeluqueroData" ColumnWidth="50px"
                              SelectionMode="DataGridSelectionMode.Single" @bind-Value=@PeluqueroSeleccionado
                         >


                              <Columns>
                                <RadzenDataGridColumn TItem="PeluqueroData" Property="Nombre" Title="Nombre y Apellido" Sortable="false" Filterable="false">
                                      <Template Context="data">
                                          <RadzenImage Path="@data.ImagenPerfil"
                                                      style="width: 50px; height: 50px; border-radius: 8px; margin-right: 8px;" />
                                          @data.Nombre @data.Apellido
                                      </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="PeluqueroData" Property="DNI" Title="D.N.I" />

                              </Columns>

                         </RadzenDataGrid>
                     }

                     @if (isLoaderPeluquero)
                     {
                        <p class="text-center"> Cargando peluqueros...</p>
                     }

                     @if (PeluqueroSeleccionado?.Any() == true)
                     {
                         <div class="row" >
                              <div class="col-md-6 m-auto">

                                   <RadzenCard class="">
                                       <h3 class="h5">Peluquero seleccionado</h3>
                                       <div class="d-flex flex-row">
                                           <RadzenImage Path="@PeluqueroSeleccionado?[0].ImagenPerfil" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                                           <div>
                                               <div>Nombre y Apellido</div>
                                               <b>@PeluqueroSeleccionado?[0].Nombre @PeluqueroSeleccionado?[0].Apellido</b>
                                               <div class="mt-3">Puesto</div>
                                               <b>Peluquero</b>
                                           </div>
                                       </div>
                                   </RadzenCard>
                              
                               </div>
                         </div>
                     }

                 </div>

                 <div class="row d-flex mt-3">

                     <RadzenButton Text="Realizar consulta"
                         class="justify-content-center"
                         ButtonStyle="ButtonStyle.Primary"
                         Click="onSubmit" 
                     />

                 </div>

             </RadzenCard>
        </div>



    </div>
                  
</RadzenTemplateForm>

<MessageModal 
    isShowModal=@showModal 
    Message=@MessageModal
/>

<Loader isShowModal="@isLoaderSpinner" />

@code {

    #region VARIABLES

    public bool isLoaderPeluquero = false;
    public bool isLoaderSpinner = false;


    public bool showModal = false;
    public string MessageModal = "";

    public List<PeluqueroData> Peluqueros = null;
    public IList<PeluqueroData> PeluqueroSeleccionado = null;


    public ModeloPrueba ModelTurno = new ModeloPrueba
    {
        HorarioCorte = DateTime.Now
    };

    #endregion


    private void changeCalendar(DateTime? value) => ModelTurno.HorarioCorte = (DateTime)value;

    private async Task GetAllPeluqueros()
    {
        try
        {
            isLoaderPeluquero = true;
            Peluqueros = null;
            PeluqueroSeleccionado = null;

            var (ListaPeluqueros, MessageError) = await this.PeluqueroService.GetAll();

            if (ListaPeluqueros == null || MessageError != null)
            {
                throw new Exception(MessageError);
            }

            isLoaderPeluquero = false;
            Peluqueros = ListaPeluqueros;
        }
        catch (Exception ex)
        {
            MessageModal = $"Uups... Ha ocurrido un error {ex.Message}";
            showModal = true;
        }
        finally
        {
            isLoaderPeluquero = false;

            var timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            Task.Run(async () =>
            {
                await Task.Delay(4000);
                timer.Dispose();
            });

            while (await timer.WaitForNextTickAsync())
            {
                showModal = false;
            }
        }
    }


    private async void onSubmit() {
        //ModelTurno.HorarioCorte
        //Console.WriteLine($"AAA {ModelTurno?.HorarioCorte}");
        //Console.WriteLine($"PROBANDO {PeluqueroSeleccionado?[0].Nombre}");


        try
        {
            isLoaderSpinner = true;


            var timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            Task.Run(async () =>
            {
                await Task.Delay(4000);
                timer.Dispose();
            });

            while (await timer.WaitForNextTickAsync())
            {
                isLoaderSpinner = false;
            }


            throw new Exception("LALALAL");

            //var (ListaPeluqueros, MessageError) = await this.PeluqueroService.GetAll();

            //if (ListaPeluqueros == null || MessageError != null)
            //{
            //    throw new Exception(MessageError);
            //}

            //isLoader = false;
            //Peluqueros = ListaPeluqueros;

        }
        catch (Exception ex)
        {
            MessageModal = $"Uups... Ha ocurrido un error {ex.Message}";
            showModal = true;
        }
        finally
        {
            isLoaderSpinner = false;

            var timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            Task.Run(async () =>
            {
                await Task.Delay(4000);
                timer.Dispose();
            });

            while (await timer.WaitForNextTickAsync())
            {
                showModal = false;
            }
        }
    }


}
