


**** Lectura de un Controller: 
     Dentro de un posible Controller, podemos tener lo siguiente:
     Nota: Codigo ejemplo sacado de otro proyecto.

     [Route("api/[controller]")]
     [ApiController]

     /// Nota: Nombre de nuestro controller.
     public class SuperHeroController : ControllerBase
     {
     }

    Esto significa que cuando tengamos que ejecutar un end-point 
    de este controller, debemos tener en cuenta lo siguiente:
    - El nombre del Controller = SuperHero;
    - El prefijo de la url = api/

    Por lo que al querer pegarle a este controller, desde el front
    deberemos utilizar algun metodo HTTP dirigido hacia "api/SuperHero",
    como por ejemplo:
    
    await Http.GetFromJsonAsync<SuperHero[]>("api/SuperHero");

    NOTA: Leer "Notas youtube Client" para conocer sobre HTTP.



*** Utilizar clases de Shared:

    Para poder importar una class desde Shared, nos debemos dirigir 
    al Program.cs de nuestro proyecto Server (o cliente dependiendo del caso) y 
    escribir lo siguiente:
    " global using ...direccion de carpeta shared...;"

    Como por ejemplo: global using BlazorProyecto.Shared.BACK_DTO;




*** Task<IActionResult> y Task<ActionResult<T>>

    Ejemplo: public async Task<IActionResult> GetSuperHeroes()

    Task<IActionResult>, nos indica que esta nos retornara una accion 
    asincrona con un Status de Codigo 200 - 400 - etc).

    Mientras que Task<ActionResult<T>>, Le especificamos que nos retornara
    datos en especifico
    Por ejem.: Task<ActionResult<List<SuperHero>>>.

    NOTA: Task reprenseta una operacion asincrona que puede retornar un valor.



*** Retornar diferentes Status ***

    Para devolver diferentes Status a nuestro Front, tenemos los sig. metodos:
    - return Ok(); // return status 200
    - BadRequest() // Return status 400  
    - NotFound() // Return status 404  

*** Utilizar BD dentro de un Controller:
    
    (NOTA: Una vez que hayamos hecho todo lo relacionado a la creacion de 
    entidades y de tablas del DbContext)

    Para poder utilizar nuestra Base de Datos dentro de un controller, 
    debemos inicializar dentro del constructor de nuestro controller 
    la clase del DbContext escribiendo el siguiente codigo:

    private readonly BaseDatosContext _context;
    public SuperHeroController(BaseDatosContext BaseDatosContext)
    {
        this._context = BaseDatosContext;
    }


*** Ejemplo de un Controller CRUD:


namespace BlazorFullStack.Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SuperHeroController : ControllerBase
    {
        // Constructor
        private readonly BaseDatosContext _context;
        public SuperHeroController(BaseDatosContext BaseDatosContext)
        {
            _context = BaseDatosContext;
        }


        [HttpGet]
        public async Task<ActionResult<List<SuperHero>>> GetSuperHeroes()
        {

            List<SuperHero> heroes = await _context.SuperHeroesEntity
                .Include(sh => sh.Comic)
                .ToListAsync();

            // Retorna un status 200 con Herores
            return Ok(heroes);
        }

        [HttpGet("comics")]
        public async Task<ActionResult<List<Comic>>> GetComics()
        {

            List<Comic> comics = await _context.ComicsEntity.ToListAsync();

            return Ok(comics);
        }



        [HttpGet("{Id}")] //Es el attr que le vamos a pasar a la ruta GET
        public async Task<ActionResult<SuperHero>> GetOneHero(int Id)
        {

            // Nota no entiendo los metodos q brinda Entity.
            SuperHero? Heroe = await _context.SuperHeroesEntity
                .Include(heroe => heroe.Comic)
                .FirstOrDefaultAsync(heroe => heroe.Id == Id);


            if (Heroe == null)
            {
                return NotFound("No se ha encontrado ningun Heroe");
            }

            // Retorna un status 200 con Herores
            return Ok(Heroe);

        }



        [HttpPost()]
        public async Task<ActionResult<List<SuperHero>>> CreateSuperHero(SuperHero heroe)
        {
            heroe.Comic = null;
            _context.SuperHeroesEntity.Add(heroe);
            await _context.SaveChangesAsync();


            /// Verificamos que se haya agregado el heroe en la BD
            return Ok(await GetDbHeores());
        }

        private async Task<ActionResult<List<SuperHero>>> GetDbHeores() {


            return await _context.SuperHeroesEntity
                .Include(superheroe => superheroe.Comic)
                .ToListAsync();

        }


        /*
           Nota: El 1er parametro es el que pasamos comun
           Mientras que el 2do parametros es el que le pasamos por la URL
           el nombre del parametro debe coincidir con lo Definido en la linea 93
        */ 
        [HttpPut("{IdParam}")] // Linea 93
        public async Task<ActionResult<List<SuperHero>>> UpdateSuperHero(SuperHero hero, int IdParam)
        {
           

            SuperHero? DbHeroe = await _context.SuperHeroesEntity
              .Include(heroe => heroe.Comic) // Incluye el comic al que pertenece pero no comprendo la relacion.
              .FirstOrDefaultAsync(heroe => heroe.Id == IdParam);


            if (DbHeroe == null) {
                return NotFound("No se pudo encontrar a este Heroe");
            }

            
            DbHeroe.FirstName = hero.FirstName;
            DbHeroe.LastName = hero.LastName;
            DbHeroe.HeroName = hero.HeroName;

            DbHeroe.ComicId = hero.ComicId;

            await _context.SaveChangesAsync();

            return Ok(await GetDbHeores());
        }


        [HttpDelete("{IdParam}")]
        public async Task<ActionResult<List<SuperHero>>> DeleteSuperHero( int IdParam)
        {
            //heroe.Comic = null
            SuperHero? DbHeroe = await _context.SuperHeroesEntity
              .Include(heroe => heroe.Comic) // Incluye el comic al que pertenece pero no comprendo la relacion.
              .FirstOrDefaultAsync(heroe => heroe.Id == IdParam);


            if (DbHeroe == null)
            {
                return NotFound("No se pudo encontrar a este Heroe");
            }

           
            _context.SuperHeroesEntity.Remove(DbHeroe);

            await _context.SaveChangesAsync();

            return Ok(await GetDbHeores());
        }
    }
}
